{
  "uid" : "fe2dead8a13c12ac",
  "name" : "test_deleteContact[names0]",
  "fullName" : "testcase.test_contact.TestContact#test_deleteContact",
  "historyId" : "68afcbfc57bbae21898a20980d4ce319",
  "time" : {
    "start" : 1615653263141,
    "stop" : 1615653306667,
    "duration" : 43526
  },
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'tmp.png'",
  "statusTrace" : "self = <page.page_object.editorialMember_page.EditorialMemberPage object at 0x000001F4DBD1EFA0>\nby = '-android uiautomator'\nlocator = 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\"我的客户\").instance(0));'\n\n    def find(self, by, locator=None):\n        try:\n>           element = self.driver.find_element(*by) if isinstance(by, tuple) else self.driver.find_element(by, locator)\n\npage\\basepage.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\")>\nby = '-android uiautomator'\nvalue = 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\"我的客户\").instance(0));'\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\nvenv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\")>\ndriver_command = 'findElement'\nparams = {'sessionId': '5fdc20aa-4758-4aa3-80d9-836c8a4bf438', 'using': '-android uiautomator', 'value': 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\"我的客户\").instance(0));'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F4DBD1E0D0>\nresponse = {'status': 500, 'value': '{\"status\":7,\"value\":{\"message\":\"An element could not be located on the page using the given search parameters.\"},\"sessionId\":\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\"}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\nvenv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F4DBD1E0D0>\nresponse = {'status': 500, 'value': '{\"status\":7,\"value\":{\"message\":\"An element could not be located on the page using the given search parameters.\"},\"sessionId\":\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\"}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\nvenv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F4DBD1E0D0>\nresponse = {'status': 500, 'value': '{\"status\":7,\"value\":{\"message\":\"An element could not be located on the page using the given search parameters.\"},\"sessionId\":\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_contact.TestContact object at 0x000001F4DBCEC940>\nnames = {'name': 'hang6'}\n\n    @allure.story(\"删除成员测试\")\n    @pytest.mark.parametrize('names', yaml.safe_load(open(f'{data_path}/test_deleteContact.yaml', 'r', encoding='utf-8')))\n    def test_deleteContact(self, names):\n        name = names['name']\n>       App().start().goto_newsPage().goto_address().goto_personalInfo(name).goto_InfoSettings().goto_editorialMember().deleteMember()\n\ntestcase\\test_contact.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\page_object\\editorialMember_page.py:14: in deleteMember\n    self.parse_action('editorialMember_page.yaml', 'deleteMember')\npage\\basepage.py:97: in parse_action\n    self.swip_click(text)\npage\\basepage.py:61: in swip_click\n    self.find(MobileBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).'\npage\\basepage.py:45: in find\n    allure.attach.file(\"tmp.png\", attachment_type=allure.attachment_type.PNG)\nvenv\\lib\\site-packages\\allure_commons\\_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nvenv\\lib\\site-packages\\allure_pytest\\listener.py:226: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\allure_commons\\reporter.py:113: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nvenv\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nD:\\Python\\Python38\\lib\\shutil.py:435: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'tmp.png'\ndst = 'D:\\\\Pycharmproject\\\\app_uiframe\\\\report\\\\5d871035-cab0-46a4-af8a-bd35bca340e7-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'tmp.png'\n\nD:\\Python\\Python38\\lib\\shutil.py:264: FileNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'tmp.png'",
    "statusTrace" : "self = <page.page_object.editorialMember_page.EditorialMemberPage object at 0x000001F4DBD1EFA0>\nby = '-android uiautomator'\nlocator = 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\"我的客户\").instance(0));'\n\n    def find(self, by, locator=None):\n        try:\n>           element = self.driver.find_element(*by) if isinstance(by, tuple) else self.driver.find_element(by, locator)\n\npage\\basepage.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\")>\nby = '-android uiautomator'\nvalue = 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\"我的客户\").instance(0));'\n\n    def find_element(self, by: str = By.ID, value: Union[str, Dict] = None) -> MobileWebElement:\n        \"\"\"'Private' method used by the find_element_by_* methods.\n    \n        Override for Appium\n    \n        Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        Returns:\n            `appium.webdriver.webelement.WebElement`: The found element\n    \n        \"\"\"\n        # TODO: If we need, we should enable below converter for Web context\n        # if self.w3c:\n        #     if by == By.ID:\n        #         by = By.CSS_SELECTOR\n        #         value = '[id=\"%s\"]' % value\n        #     elif by == By.TAG_NAME:\n        #         by = By.CSS_SELECTOR\n        #     elif by == By.CLASS_NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = \".%s\" % value\n        #     elif by == By.NAME:\n        #         by = By.CSS_SELECTOR\n        #         value = '[name=\"%s\"]' % value\n    \n>       return self.execute(RemoteCommand.FIND_ELEMENT, {'using': by, 'value': value})['value']\n\nvenv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.webdriver.WebDriver (session=\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\")>\ndriver_command = 'findElement'\nparams = {'sessionId': '5fdc20aa-4758-4aa3-80d9-836c8a4bf438', 'using': '-android uiautomator', 'value': 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().text(\"我的客户\").instance(0));'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F4DBD1E0D0>\nresponse = {'status': 500, 'value': '{\"status\":7,\"value\":{\"message\":\"An element could not be located on the page using the given search parameters.\"},\"sessionId\":\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\"}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n            super().check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace) from wde\n            else:\n>               raise wde\n\nvenv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F4DBD1E0D0>\nresponse = {'status': 500, 'value': '{\"status\":7,\"value\":{\"message\":\"An element could not be located on the page using the given search parameters.\"},\"sessionId\":\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\"}'}\n\n    def check_response(self, response: Dict) -> None:\n        try:\n>           super().check_response(response)\n\nvenv\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x000001F4DBD1E0D0>\nresponse = {'status': 500, 'value': '{\"status\":7,\"value\":{\"message\":\"An element could not be located on the page using the given search parameters.\"},\"sessionId\":\"5fdc20aa-4758-4aa3-80d9-836c8a4bf438\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: An element could not be located on the page using the given search parameters.\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_contact.TestContact object at 0x000001F4DBCEC940>\nnames = {'name': 'hang6'}\n\n    @allure.story(\"删除成员测试\")\n    @pytest.mark.parametrize('names', yaml.safe_load(open(f'{data_path}/test_deleteContact.yaml', 'r', encoding='utf-8')))\n    def test_deleteContact(self, names):\n        name = names['name']\n>       App().start().goto_newsPage().goto_address().goto_personalInfo(name).goto_InfoSettings().goto_editorialMember().deleteMember()\n\ntestcase\\test_contact.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\page_object\\editorialMember_page.py:14: in deleteMember\n    self.parse_action('editorialMember_page.yaml', 'deleteMember')\npage\\basepage.py:97: in parse_action\n    self.swip_click(text)\npage\\basepage.py:61: in swip_click\n    self.find(MobileBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).'\npage\\basepage.py:45: in find\n    allure.attach.file(\"tmp.png\", attachment_type=allure.attachment_type.PNG)\nvenv\\lib\\site-packages\\allure_commons\\_allure.py:182: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nvenv\\lib\\site-packages\\allure_pytest\\listener.py:226: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\lib\\site-packages\\allure_commons\\reporter.py:113: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nvenv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nvenv\\lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\nD:\\Python\\Python38\\lib\\shutil.py:435: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'tmp.png'\ndst = 'D:\\\\Pycharmproject\\\\app_uiframe\\\\report\\\\5d871035-cab0-46a4-af8a-bd35bca340e7-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'tmp.png'\n\nD:\\Python\\Python38\\lib\\shutil.py:264: FileNotFoundError",
    "steps" : [ {
      "name" : "进入消息页面",
      "time" : {
        "start" : 1615653284192,
        "stop" : 1615653284192,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "进入通讯录页面",
      "time" : {
        "start" : 1615653284192,
        "stop" : 1615653286753,
        "duration" : 2561
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "进入个人信息页面",
      "time" : {
        "start" : 1615653286754,
        "stop" : 1615653290991,
        "duration" : 4237
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "name",
        "value" : "'hang6'"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "进入成员设置页面",
      "time" : {
        "start" : 1615653290991,
        "stop" : 1615653291974,
        "duration" : 983
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "进入编辑成员页面",
      "time" : {
        "start" : 1615653291974,
        "stop" : 1615653293096,
        "duration" : 1122
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "编辑成员界面，删除成员",
      "time" : {
        "start" : 1615653293096,
        "stop" : 1615653306663,
        "duration" : 13567
      },
      "status" : "broken",
      "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'tmp.png'\n",
      "statusTrace" : "  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\Pycharmproject\\app_uiframe\\page\\page_object\\editorialMember_page.py\", line 14, in deleteMember\n    self.parse_action('editorialMember_page.yaml', 'deleteMember')\n  File \"D:\\Pycharmproject\\app_uiframe\\page\\basepage.py\", line 97, in parse_action\n    self.swip_click(text)\n  File \"D:\\Pycharmproject\\app_uiframe\\page\\basepage.py\", line 61, in swip_click\n    self.find(MobileBy.ANDROID_UIAUTOMATOR, 'new UiScrollable(new UiSelector().scrollable(true).instance(0)).'\n  File \"D:\\Pycharmproject\\app_uiframe\\page\\basepage.py\", line 45, in find\n    allure.attach.file(\"tmp.png\", attachment_type=allure.attachment_type.PNG)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 182, in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 84, in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n    return outcome.get_result()\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\allure_pytest\\listener.py\", line 226, in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\allure_commons\\reporter.py\", line 113, in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 84, in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n    return outcome.get_result()\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"d:\\pycharmproject\\app_uiframe\\venv\\lib\\site-packages\\allure_commons\\logger.py\", line 53, in report_attached_file\n    shutil.copy2(source, destination)\n  File \"D:\\Python\\Python38\\lib\\shutil.py\", line 435, in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n  File \"D:\\Python\\Python38\\lib\\shutil.py\", line 264, in copyfile\n    with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:\n",
      "steps" : [ ],
      "attachments" : [ {
        "type" : "image/png",
        "size" : 0
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "c7631e50db89b4ab",
      "name" : "log",
      "source" : "c7631e50db89b4ab.txt",
      "type" : "text/plain",
      "size" : 503
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 6,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "删除成员测试"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_contact"
  }, {
    "name" : "subSuite",
    "value" : "TestContact"
  }, {
    "name" : "host",
    "value" : "LAPTOP-6KHBA40C"
  }, {
    "name" : "thread",
    "value" : "4064-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_contact"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "names",
    "value" : "{'name': 'hang6'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "fe2dead8a13c12ac.json",
  "parameterValues" : [ "{'name': 'hang6'}" ]
}